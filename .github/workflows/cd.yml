name: fast-cd

on:
  push:
    branches:
      - main

jobs:
  ansible-lint:
    name: Ansible Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install ansible-lint
        run: pip install ansible-lint==6.16.1  # Defina uma versão estável
      - name: Run ansible-lint
        run: ansible-lint
        working-directory: ./ansible
  
  terraform-lint:
    name: Terraform Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.52.0
      - name: Show version
        run: tflint --version
      - name: Init TFLint
        run: tflint --init
      - name: Run TFLint
        run: tflint -f compact

  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: production
    needs: 
      - ansible-lint
      - terraform-lint
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    outputs:
      instance_nat_ip: ${{ steps.instance_inventory.outputs.instance_nat_ip }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup SSH
        shell: bash
        run: |
          mkdir -p /home/runner/.ssh/
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > /home/runner/.ssh/ecdsa_ansible.pub
          chmod 644 /home/runner/.ssh/ecdsa_ansible.pub
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Configurar credenciais Google
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        run: |
          echo "${{ secrets.GCP_CREDENTIALS }}" | base64 --decode > /tmp/google-credentials.json
          chmod 400 /tmp/google-credentials.json
          export GOOGLE_APPLICATION_CREDENTIALS="/tmp/google-credentials.json"
      - name: Terraform Init
        run: terraform init
        env:
          GOOGLE_CREDENTIALS: /tmp/google-credentials.json
      - name: Terraform Validate
        run: terraform validate
        env:
          GOOGLE_CREDENTIALS: /tmp/google-credentials.json
      - name: Terraform Plan
        run: terraform plan -input=false
        env:
          GOOGLE_CREDENTIALS: /tmp/google-credentials.json
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
        env:
          GOOGLE_CREDENTIALS: /tmp/google-credentials.json
      - name: Terraform Output
        id: instance_inventory
        run: echo "instance_nat_ip=$(terraform output instance_nat_ip)" >> "$GITHUB_OUTPUT"
        env:
          GOOGLE_CREDENTIALS: /tmp/google-credentials.json

  ansible:
    name: Ansible
    runs-on: ubuntu-latest
    environment: production
    needs: 
      - terraform
    defaults:
      run:
        shell: bash
        working-directory: ./ansible
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup SSH
        shell: bash
        run: |
          mkdir -p /home/runner/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /home/runner/.ssh/ecdsa_ansible
          chmod 600 /home/runner/.ssh/ecdsa_ansible
      - name: Create Ansible Inventory
        run: |
          echo "lab-fast-ci-cd ansible_port=22 ansible_host=${INSTANCE_NAT_IP} ansible_user=ansible ansible_ssh_private_key_file=/home/runner/.ssh/ecdsa_ansible" > ./inventory.yml
          cat ./inventory.yml
        env:
          INSTANCE_NAT_IP: ${{ needs.terraform.outputs.instance_nat_ip }}
      - name: Run Ansible Playbook 
        env:
          ANSIBLE_HOST_KEY_CHECKING: False
        run: |
          ansible-playbook -i ./inventory.yml main.yml
